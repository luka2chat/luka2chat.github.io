---
import { languages, getLangFromUrl, getAlternateLanguagePaths } from '~/utils/i18n';
import { Icon } from 'astro-icon/components';

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const alternatePaths = getAlternateLanguagePaths(currentPath, currentLang);

// 检查是否是tag或category页面，如果是则不显示语言切换
const isTagOrCategoryPage = currentPath.includes('/tag/') || currentPath.includes('/category/');
---

{
  !isTagOrCategoryPage && (
    <div class="relative inline-block text-left">
      <div>
        <button
          id="language-menu-button"
          aria-expanded="false"
          aria-haspopup="true"
          type="button"
          class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
          aria-label="Switch Language / 切换语言"
        >
          <Icon name="tabler:language" class="w-5 h-5" />
        </button>
      </div>

      <div
        class="absolute right-0 z-10 mt-2 w-32 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-600 hidden"
        role="menu"
        aria-orientation="vertical"
        aria-labelledby="language-menu-button"
        id="language-menu"
      >
        <div class="py-1" role="none">
          {Object.entries(languages).map(([code, name]) => (
            <a
              href={alternatePaths[code as keyof typeof languages]}
              class={`block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 ${
                code === currentLang
                  ? 'text-gray-900 font-medium dark:text-gray-100'
                  : 'text-gray-700 dark:text-gray-300'
              }`}
              role="menuitem"
            >
              {name}
            </a>
          ))}
        </div>
      </div>
    </div>
  )
}

<script>
  let languageSelectorInitialized = false;
  let currentButton: HTMLElement | null = null;
  let currentMenu: HTMLElement | null = null;
  let outsideClickHandler: ((event: Event) => void) | null = null;

  function closeMenu() {
    if (currentMenu && currentButton) {
      currentMenu.classList.add('hidden');
      currentButton.setAttribute('aria-expanded', 'false');
    }
  }

  function toggleMenu(event: Event) {
    event.preventDefault();
    event.stopPropagation();

    if (!currentMenu || !currentButton) return;

    const isHidden = currentMenu.classList.contains('hidden');
    if (isHidden) {
      currentMenu.classList.remove('hidden');
      currentButton.setAttribute('aria-expanded', 'true');
    } else {
      closeMenu();
    }
  }

  function handleOutsideClick(event: Event) {
    if (!currentButton || !currentMenu) return;

    const target = event.target as Node;
    if (!currentButton.contains(target) && !currentMenu.contains(target)) {
      closeMenu();
    }
  }

  function setupLanguageSelector() {
    // 如果已经初始化过，先清理旧的事件监听器
    if (languageSelectorInitialized && currentButton && outsideClickHandler) {
      currentButton.removeEventListener('click', toggleMenu);
      document.removeEventListener('click', outsideClickHandler);
    }

    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');

    if (!button || !menu) return;

    currentButton = button;
    currentMenu = menu;

    // 添加按钮点击事件
    button.addEventListener('click', toggleMenu);

    // 添加外部点击事件
    outsideClickHandler = handleOutsideClick;
    document.addEventListener('click', outsideClickHandler);

    languageSelectorInitialized = true;
  }

  // 初始化
  setupLanguageSelector();

  // 页面导航时重新设置
  document.addEventListener('astro:page-load', setupLanguageSelector);

  // 页面卸载时清理
  document.addEventListener('astro:before-preparation', () => {
    if (currentButton && outsideClickHandler) {
      currentButton.removeEventListener('click', toggleMenu);
      document.removeEventListener('click', outsideClickHandler);
    }
    languageSelectorInitialized = false;
  });
</script>
